{"ast":null,"code":"var _this = this;\n\nimport axios from 'axios';\nimport thunk from 'redux-thunk';\nexport var FETCHING = 'FETCHING';\nexport var GET_SUCCESS = 'GET_SUCCESS';\nexport var SUCCESS = 'SUCCESS';\nexport var FAIL = 'FAIL'; //GET\n\nexport var getNotes = function getNotes() {\n  return function (dispatch) {\n    dispatch({\n      type: FETCHING\n    });\n    axios.get('https://fe-notes.herokuapp.com/note/get/all').then(function (response) {\n      // console.log(response.data);\n      dispatch({\n        type: GET_SUCCESS,\n        payload: response.data\n      }); // this.setState({ notes: response.data });\n    }).catch(function (err) {\n      console.log(err);\n      dispatch({\n        type: FAIL,\n        payload: 'Error getting notes'\n      });\n    });\n  };\n}; //POST\n\nexport var createNote = function createNote(note) {\n  return function (dispatch) {\n    axios.post('https://fe-notes.herokuapp.com/note/create', note).then(function (res) {\n      // console.log('response from createNote ', res);\n      dispatch({\n        type: SUCCESS\n      });\n    }).catch(function (err) {\n      dispatch({\n        type: FAIL,\n        payload: 'Error getting notes'\n      });\n    });\n  };\n}; //UPDATE\n\nexport var editNote = function editNote(id, note) {\n  return function (dispatch) {\n    axios.put(\"https://fe-notes.herokuapp.com/note/edit/\".concat(id), note).then(function (res) {\n      // console.log('response from editNote ', res);\n      dispatch({\n        type: SUCCESS\n      });\n\n      _this.setState({\n        title: '',\n        body: '',\n        noteEdited: true\n      });\n    }).catch(function (err) {\n      dispatch({\n        type: FAIL,\n        payload: 'Error editing note'\n      });\n    });\n  };\n}; //DELETE\n\nexport var deleteNote = function deleteNote(id) {\n  // console.log(`${id}`, ' deleted');\n  return function (dispatch) {\n    axios.delete(\"https://fe-notes.herokuapp.com/note/delete/\".concat(id)).then(function (res) {\n      // console.log('response from deleteNote: ', res);\n      dispatch({\n        type: SUCCESS\n      });\n    }).catch(function (err) {\n      console.log('error deleting');\n      dispatch({\n        type: FAIL,\n        payload: 'Error deleting note'\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/Users/jesseanderson/LambdaSchool/CSPT2/front-end-project-week/lambda-notes/src/actions/actions.js"],"names":["axios","thunk","FETCHING","GET_SUCCESS","SUCCESS","FAIL","getNotes","dispatch","type","get","then","response","payload","data","catch","err","console","log","createNote","note","post","res","editNote","id","put","setState","title","body","noteEdited","deleteNote","delete"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport thunk from 'redux-thunk';\n\nexport const FETCHING = 'FETCHING';\nexport const GET_SUCCESS = 'GET_SUCCESS';\nexport const SUCCESS = 'SUCCESS';\nexport const FAIL = 'FAIL';\n\n//GET\nexport const getNotes = () => {\n  return dispatch => {\n    dispatch({ type: FETCHING });\n    axios\n      .get('https://fe-notes.herokuapp.com/note/get/all')\n      .then(response => {\n        // console.log(response.data);\n        dispatch({ type: GET_SUCCESS, payload: response.data });\n        // this.setState({ notes: response.data });\n      })\n      .catch(err => {\n        console.log(err);\n        dispatch({ type: FAIL, payload: 'Error getting notes' });\n      });\n  };\n};\n\n//POST\n\nexport const createNote = note => {\n  return dispatch => {\n    axios\n      .post('https://fe-notes.herokuapp.com/note/create', note)\n      .then(res => {\n        // console.log('response from createNote ', res);\n        dispatch({ type: SUCCESS });\n      })\n      .catch(err => {\n        dispatch({ type: FAIL, payload: 'Error getting notes' });\n      });\n  };\n};\n\n//UPDATE\n\nexport const editNote = (id, note) => {\n  return dispatch => {\n    axios\n      .put(`https://fe-notes.herokuapp.com/note/edit/${id}`, note)\n      .then(res => {\n        // console.log('response from editNote ', res);\n        dispatch({ type: SUCCESS });\n        this.setState({ title: '', body: '', noteEdited: true });\n      })\n      .catch(err => {\n        dispatch({ type: FAIL, payload: 'Error editing note' });\n      });\n  };\n};\n\n//DELETE\n\nexport const deleteNote = id => {\n  // console.log(`${id}`, ' deleted');\n  return dispatch => {\n    axios\n      .delete(`https://fe-notes.herokuapp.com/note/delete/${id}`)\n      .then(res => {\n        // console.log('response from deleteNote: ', res);\n        dispatch({ type: SUCCESS });\n      })\n      .catch(err => {\n        console.log('error deleting');\n        dispatch({ type: FAIL, payload: 'Error deleting note' });\n      });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}